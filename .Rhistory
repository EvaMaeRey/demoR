sym(dat)
x <- rlang::expr(ggplot(sym(dat)))
x
!!sym(dat)
dat
to_expr <- gsub("{dataset}", rlang::expr(!!sym(dat)), my_string, fixed = TRUE)
to_expr
to_expr <- gsub("{dataset}", rlang::expr(!!sym(dat_evil)), my_string, fixed = TRUE)
to_expr
to_expr <- gsub("{dataset}", "!!sym(dat)", my_string, fixed = TRUE)
to_expr
parse(to_expr)
parse(text = to_expr)
x <- rlang::expr(!!parse(text = to_expr)))
x <- rlang::expr(!!parse(text = to_expr))
x
enquo(to_expr)
quo(to_expr)
!!quo(to_expr)
!!enquo(to_expr)
x <- rlang::expr(!!quo(to_expr))
x
rlang::expr(ggplot(!!sym(dat_evil)))
dat_evil <- "I suck);ew("
rlang::expr(ggplot(!!sym(dat_evil)))
sym(dat)
sym(dat_evil)
to_expr <- gsub("{dataset}", sym(dat), my_string, fixed = TRUE)
to_expr
to_expr <- gsub("{dataset}", sym(dat_evil), my_string, fixed = TRUE)
to_expr
to_expr <- gsub("{dataset}", "!!sym(dat)", my_string, fixed = TRUE)
enquo(to_expr)
x <- rlang::expr(!!eval(to_expr))
x
x <- rlang::expr(!!to_expr)
x
!!sym(x)
!!sym(to_expr)
x <- rlang::expr(!!sym(to_expr))
x
eval(x)
to_expr <- gsub("{dataset}", sym(dat_evil), my_string, fixed = TRUE)
enquo(dat)
enquo(dat_evil)
dat <- "mtcars"
dat_evil <- "I suck);ew("
var <- "am"
my_string <- "ggplot({dataset}) + geom_bar(aes(x = {variable}))"
to_expr <- gsub("{dataset}", !!sym(dat), my_string, fixed = TRUE)
to_expr <- gsub("{variable}", !!sym(var), to_expr, fixed = TRUE)
to_expr <- gsub("{variable}", "!!sym(var)", to_expr, fixed = TRUE)
dat <- "mtcars"
dat_evil <- "I suck);ew("
var <- "am"
my_string <- "ggplot({dataset}) + geom_bar(aes(x = {variable}))"
to_expr <- gsub("{dataset}", "!!sym(dat)", my_string, fixed = TRUE)
to_expr <- gsub("{variable}", "!!sym(var)", to_expr, fixed = TRUE)
eval(parse = to_expr))
eval(parse(text = to_expr))
to_expr <- gsub("{dataset}", `dat`, my_string, fixed = TRUE)
to_expr
to_expr <- gsub("{dataset}", "`dat`", my_string, fixed = TRUE)
to_expr <- gsub("{variable}", var, to_expr, fixed = TRUE)
eval(parse(text = to_expr))
to_expr <- gsub("{dataset}", paste(`, !!sym(dat), `), my_string, fixed = TRUE)
to_expr <- gsub("{dataset}", paste("`", !!sym(dat), "`"), my_string, fixed = TRUE)
to_expr <- gsub("{dataset}", paste("`", sym(dat), "`"), my_string, fixed = TRUE)
to_expr
to_expr <- gsub("{dataset}", paste0("`", sym(dat), "`"), my_string, fixed = TRUE)
to_expr <- gsub("{variable}", paste0("`", sym(dat), "`"), to_expr, fixed = TRUE)
to_expr
dat <- "mtcars"
dat_evil <- "I suck);ew("
var <- "am"
my_string <- "ggplot({dataset}) + geom_bar(aes(x = {variable}))"
to_expr <- gsub("{dataset}", paste0("`", sym(dat), "`"), my_string, fixed = TRUE)
to_expr <- gsub("{variable}", paste0("`", sym(var), "`"), to_expr, fixed = TRUE)
to_expr
eval(parse(text = to_expr))
dat <- "mtcars"
dat_evil <- "I suck);ew("
var <- "am"
my_string <- "ggplot({dataset}) + geom_bar(aes(x = {variable}))"
to_expr <- gsub("{dataset}", paste0("`", sym(dat_evil), "`"), my_string, fixed = TRUE)
to_expr <- gsub("{variable}", paste0("`", sym(var), "`"), to_expr, fixed = TRUE)
eval(parse(text = to_expr))
dat <- "mtcars"
dat_evil <- "`I suck);ew("
var <- "am"
my_string <- "ggplot({dataset}) + geom_bar(aes(x = {variable}))"
to_expr <- gsub("{dataset}", paste0("`", sym(dat_evil), "`"), my_string, fixed = TRUE)
to_expr <- gsub("{variable}", paste0("`", sym(var), "`"), to_expr, fixed = TRUE)
eval(parse(text = to_expr))
to_expr
dat <- "mtcars"
dat_evil <- "hi`I suck);ew("
var <- "am"
my_string <- "ggplot({dataset}) + geom_bar(aes(x = {variable}))"
to_expr <- gsub("{dataset}", paste0("`", sym(dat_evil), "`"), my_string, fixed = TRUE)
to_expr <- gsub("{variable}", paste0("`", sym(var), "`"), to_expr, fixed = TRUE)
eval(parse(text = to_expr))
dat <- "mtcars"
dat_evil <- "hi`);I suck();ew("
var <- "am"
my_string <- "ggplot({dataset}) + geom_bar(aes(x = {variable}))"
to_expr <- gsub("{dataset}", paste0("`", sym(dat_evil), "`"), my_string, fixed = TRUE)
to_expr <- gsub("{variable}", paste0("`", sym(var), "`"), to_expr, fixed = TRUE)
eval(parse(text = to_expr))
y <- rlang::expr(!!x + geom_point())
x<-rlang::expr(ggplot(!!sym(dat_evil)))
y <- rlang::expr(!!x + geom_point())
y
x<-rlang::expr(ggplot(!!sym(dat)))
y <- rlang::expr(!!x + geom_point())
y
rlang::expr("hi")
rlang::expr(!!"hi")
rlang::expr(!!sym("hi"))
rlang::expr(!!sym("ggplot(mycars) + geom_point(aes(x = am))"))
rlang::expr(!!sym("ggplot(mycars)"))
rlang::expr(!!sym(parse(text ="ggplot(mycars)")))
rlang::expr(sym(parse(text ="ggplot(mycars)")))
rlang::expr(!!(parse(text ="ggplot(mycars)")))
?expression
is.data.frame(mtcars)
is.data.frame(tbl_df(mtcars))
print(sym(dat))
print(sym(dat_evil))
sym(dat_evil)
paste0("`", sym(dat_evil), "`")
to_expr <- gsub("{dataset}", sym(dat_evil), my_string, fixed = TRUE)
sym(dat_evil)
dat <- "mtcars"
dat_evil <- ");I suck();ew("
dat_evil2 <- "hi`);I suck();ew("
sym(dat_evil)
sym(dat_evil2)
paste0(sym(dat_evil2), "hi")
!!sym(dat_evil2)
!!(sym(dat_evil2))
??!!
!
?
"
)
hi
wtf
stop
`
`
()
is.data.frame(!!sym(dat))
is.data.frame(sym(dat))
is.data.frame(mtcars)
?rlang
??rlang
?quo
ensym(dat)
sym(dat)
is.data.frame(!!dat)
is.data.frame(!!quo(dat))
x <- rlang::expr(is.data.frame(!!sym(dat)))
x
eval(x)
x <- rlang::expr(is.data.frame(!!sym(dat_evil)))
eval(x)
x <- rlang::expr(is.data.frame(!!sym(dat_evil2)))
eval(x)
x <- rlang::expr(!!sym(dat_evil2))
eval(x)
to_expr <- gsub("{dataset}", x, my_string, fixed = TRUE)
to_expr
x
my_string <- ggplot({dataset}) + geom_bar(aes(x = {variable}))
my_string <- "ggplot({dataset}) + geom_bar(aes(x = {variable}))"
x <- rlang::expr(!!sym(dat_evil2))
to_expr <- gsub("{dataset}", x, my_string, fixed = TRUE)
to_exr
to_expr
bits <- str_split(my_string, "{|}")
bits <- str_split(my_string, "\{|\}")
bits <- str_split(my_string, "{")
?str_split
bits <- str_split_fixed(my_string, "{")
bits <- str_split(my_string, fixed("{"))
bits
x <- rlang::expr(!!sym(dat_evil2)
x <- rlang::expr(ggplot(!!sym(dat)))
y <- rlang::expr(!!x + geom_point())
####
bits <- str_split(my_string, "\{.*\}"))
?regexp
x <- rlang::expr(!!sym(dat_evil2)
x <- rlang::expr(ggplot(!!sym(dat)))
y <- rlang::expr(!!x + geom_point())
####
bits <- str_split(my_string, "{.*}"))
bits <- str_split(my_string, "{.*}")
bits <- str_split(my_string, "{.+}")
bits <- str_split(my_string, "{*}")
?str_split
my_string
bits <- str_extract(my_string, "{.*}")
bits <- str_extract(my_string, ".*")
bits
bits <- str_extract(my_string, "\{.*")
bits <- str_extract(my_string, "\\{.*")
bits
bits <- str_extract(my_string, "\\{.*\\}")
bits
bits <- str_extract(my_string, "\\{[^\\{\\}]*\\}")
bits
bits <- str_extract_all(my_string, "\\{[^\\{\\}]*\\}")
bits
?str_extract
dat <- "mtcars"
dat_evil <- ");I suck();ew("
dat_evil2 <- "hi`);I suck();ew("
var <- "am"
my_string <- "ggplot({dataset}) + geom_bar(aes(x = {variable}))"
to_expr <- gsub("{dataset}", "!!sym(dat_evil)", my_string, fixed = TRUE)
to_expr <- gsub("{variable}", "!!sym(var)", to_expr, fixed = TRUE)
to_expr
x <- eval(parse(text = paste0("rlang::expr(", to_expr, ")")))
x
eval(parse(text = paste0("rlang::expr(", to_expr, ")")))
eval(x)
dat <- "mtcars"
dat_evil <- ");I suck();ew("
dat_evil2 <- "hi`);I suck();ew("
var <- "am"
my_string <- "ggplot({dataset}) + geom_bar(aes(x = {variable}))"
to_expr <- gsub("{dataset}", "!!sym(dat)", my_string, fixed = TRUE)
to_expr <- gsub("{variable}", "!!sym(var)", to_expr, fixed = TRUE)
x <- eval(parse(text = paste0("rlang::expr(", to_expr, ")")))
eval(x)
?strsplit
?grep
grep(my_string, "{})
"
)
grep(my_string, "\\{")
grep("{", my_string)
grep("{", my_string, fixed = TRUE)
grepl("{", my_string, fixed = TRUE)
regexpr("{", my_string, fixed = TRUE)
gregexpr("{", my_string, fixed = TRUE)
?str_split
stringr::str_locate_all(my_string, "\\{[^\\{\\}]*\\}")
bits <- str_extract_all(my_string, "\\{[^\\{\\}]\1\\}")
bits
user_inputs = list(dataset = "mtcars", variable = "am")
names(user_inputs)
paste0(names(user_inputs))
to_replace <- paste0("{", names(user_inputs), "}")
to_replace
?str_replace
sym_replace <- paste0("!!sym(", names(user_inputs), ")")
sym_replace
?glue
glue("My name is {name}, not {{name}}.")
library(glue)
glue("My name is {name}, not {{name}}.")
name = "Kelly"
glue("My name is {name}, not {{name}}.")
glue(my_string, dataset = "!!sym(dataset))")
glue(my_string, dataset = "!!sym(dataset))", variable = "!!sym(variable)")
eval(x)
x <- glue(my_string, dataset = "!!sym(dataset))", variable = "!!sym(variable)")
eval(x)
eval(rlang::expr(x))
x
x <- glue(my_string, dataset = "!!sym(dataset))", variable = "!!sym(variable)")
y <- eval(parse(text = paste0("rlang::expr(", x, ")")))
x <- glue(my_string, dataset = "!!sym(dataset))", variable = "!!sym(variable)")
y <- eval(parse(text = paste0("rlang::expr(", x, ")"))
)
x <- glue(my_string, dataset = "!!sym(dataset)", variable = "!!sym(variable)")
y <- eval(parse(text = paste0("rlang::expr(", x, ")"))
)
x <- glue(my_string, dataset = "!!sym(dat)", variable = "!!sym(var)")
y <- eval(parse(text = paste0("rlang::expr(", x, ")")))
eval(parse(text = paste0("rlang::expr(", x, ")")))
eval(y)
glue
glue_Data
glue_data
sub_syms <- function(...){
paste0("!!sym(", ..., ")")
}
sub_syms(dataset = "dat", variable = "var")
paste0("!!sym(", list(...), ")")
sub_syms <- function(...){
paste0("!!sym(", list(...), ")")
}
sub_syms(dataset = "dat", variable = "var")
my_list <- list(dataset = "dat", variable = "var")
my_list
sub_syms(my_list)
sub_syms <- function(my_list){
lapply(my_list, function(x) paste0("!!sym(", x, ")"))
}
my_list <- list(dataset = "dat", variable = "var")
sub_syms(my_list)
code_string <- glue(code_string, sym_replace)
glue(my_string, sub_syms(my_list))
glue(my_string, unlist(sub_syms(my_list)))
?glue
glue(my_string, sub_syms(my_list))
my_string
sub_syms(my_list)
?glue_data
mtcars %>% glue_data("{rownames(.)} has {hp} hp")
glue_data(my_string, sub_syms(my_list))
my_string
glue_data(sub_syms(my_list), my_string)
bridge <- function(code_string, user_inputs = list()){
to_replace <- paste0("{", names(user_inputs), "}")
sym_replace <- sub_syms(user_inputs)
#print_replace <- sub_print(user_inputs)
code_string <- glue_data(sub_syms(my_list), my_string)
my_expr <- eval(parse(text = paste0("rlang::expr("code_string")")))
eval(my_expr)
}
bridge <- function(code_string, user_inputs = list()){
to_replace <- paste0("{", names(user_inputs), "}")
sym_replace <- sub_syms(user_inputs)
#print_replace <- sub_print(user_inputs)
code_string <- glue_data(sub_syms(my_list), my_string)
my_expr <- eval(parse(text = paste0("rlang::expr(",code_string,")")))
eval(my_expr)
}
bridge(my_string, dataset = dat, variable = var)
bridge(my_string, list(dataset = dat, variable = var)))
bridge(my_string, list(dataset = dat, variable = var))
bridge(my_string, list(dataset = dat_evil, variable = var))
user_inputs <- list(dataset = dat_evil, variable = var)
code_string <- my_string
to_replace <- paste0("{", names(user_inputs), "}")
sym_replace <- sub_syms(user_inputs)
code_string <- glue_data(sub_syms(my_list), my_string)
my_expr <- eval(parse(text = paste0("rlang::expr(",code_string,")")))
eval(my_expr)
my_list
code_string <- glue_data(sub_syms(user_inputs), my_string)
code_string
user_inputs
bridge(my_string, list(dataset = "dat", variable = "var"))
bridge(my_string, list(dataset = "dat_evil", variable = "var"))
dat_evil
bridge <- function(code_string, user_inputs = list()){
code_string <- glue_data(sub_syms(user_inputs), my_string)
my_expr <- eval(parse(text = paste0("rlang::expr(",code_string,")")))
eval(my_expr)
}
bridge(my_string, list(dataset = "dat_evil", variable = "var"))
bridge <- function(code_string, user_inputs = list()){
code_string <- glue_data(sub_syms(names(user_inputs)), my_string)
my_expr <- eval(parse(text = paste0("rlang::expr(",code_string,")")))
eval(my_expr)
}
bridge(my_string, list(dataset = dat_evil, variable = var))
user_inputs <- list(dataset = dat_evil, variable = var)
user_inputs
names(user_inputs)
bridge <- function(code_string, ...){
code_string <- glue_data(sub_syms(names(...)), my_string)
my_expr <- eval(parse(text = paste0("rlang::expr(",code_string,")")))
eval(my_expr)
}
bridge(my_string, dataset = dat_evil, variable = var)
bridge <- function(code_string, ...){
code_string <- glue_data(sub_syms(names(list(...))), my_string)
my_expr <- eval(parse(text = paste0("rlang::expr(",code_string,")")))
eval(my_expr)
}
bridge(my_string, dataset = dat_evil, variable = var)
lapply(user_inputs, quo)
user_inputs
bridge <- function(code_string, user_inputs){
lapply(user_inputs, enquo)
code_string <- glue_data(sub_syms(user_inputs), my_string)
my_expr <- eval(parse(text = paste0("rlang::expr(",code_string,")")))
eval(my_expr)
}
bridge(my_string, list(dataset = dat_evil, variable = var))
bridge <- function(code_string, user_inputs){
user_inputs <- lapply(user_inputs, enquo)
code_string <- glue_data(sub_syms(user_inputs), my_string)
my_expr <- eval(parse(text = paste0("rlang::expr(",code_string,")")))
eval(my_expr)
}
bridge(my_string, list(dataset = dat_evil, variable = var))
rlang::last_error()
rlang::expr(ggplot(!!sym(df)) + (!!sym(plot_fun))())
rlang::expr(ggplot(!!sym(df)) + (!!sym(plot_type))())
#df <- "); system('ls')"
df <- "mtcars"
plot_type = "point"
template <- "ggplot(%input)"
sub("%input", deparse(sym(df)), template, fixed = TRUE)
plot_fun <- paste0("geom_", plot_type)
rlang::expr(ggplot(!!sym(df)) + (!!sym(plot_fun))())
# glue for strings
#styler::style_text(capture.output(print(exp)))
rlang::expr(ggplot(!!sym(dat_evil)) + (!!sym(plot_fun))())
eval(x)
x <- rlang::expr(ggplot(!!sym(dat_evil)) + (!!sym(plot_fun))())
eval(x)
list(dataset = dat_evil, variable = var)
bridge(my_string, list(dataset = "dat_evil", variable = "var"))
bridge <- function(code_string, user_inputs){
code_string <- glue_data(sub_syms(user_inputs), my_string)
my_expr <- eval(parse(text = paste0("rlang::expr(",code_string,")")))
eval(my_expr)
}
bridge(my_string, list(dataset = "dat_evil", variable = "var"))
bridge(my_string, list(dataset = "dat", variable = "var"))
sub_syms <- function(my_list){
lapply(my_list, function(x) paste0("!!sym(user_inputs[['", x, "']])"))
}
glue_data(sub_syms(names(user_inputs)), my_string)
user_inputs <- list(dataset = dat_evil, variable = var)
glue_data(sub_syms(names(user_inputs)), my_string)
names(user_inputs)
sub_syms(names(user_inputs))
sym_inputs <- sub_syms(names(user_inputs))
names(sym_inpus) <- names(user_inputs)
names(sym_inputs) <- names(user_inputs)
code_string <- glue_data(sym_inputs, my_string)
code_string
my_expr <- eval(parse(text = paste0("rlang::expr(",code_string,")")))
eval(my_expr)
bridge <- function(code_string, user_inputs = list()){
sym_inputs <- sub_syms(names(user_inputs))
names(sym_inputs) <- names(user_inputs)
code_string <- glue_data(sym_inputs, my_string)
my_expr <- eval(parse(text = paste0("rlang::expr(",code_string,")")))
eval(my_expr)
}
user_inputs <- list(dataset = dat_evil, variable = var)
bridge(my_string, user_inputs)
user_inputs <- list(dataset = dat, variable = var)
bridge(my_string, user_inputs)
user_inputs <- list(dataset = dat, variable = var, plot_type = "bar")
bridge(my_string, user_inputs)
user_inputs <- list(dataset = dat, variable = var, plot_type = "histogram")
bridge(my_string, user_inputs)
my_string <- "ggplot({dataset}) + geom_{plot_type}(aes(x = {variable}))"
user_inputs <- list(dataset = dat, variable = var, plot_type = "histogram")
bridge(my_string, user_inputs)
sub_syms <- function(my_list){
lapply(my_list, function(x) paste0("(!!sym(user_inputs[['", x, "']]))"))
}
bridge <- function(code_string, user_inputs = list()){
sym_inputs <- sub_syms(names(user_inputs))
names(sym_inputs) <- names(user_inputs)
code_string <- glue_data(sym_inputs, my_string)
my_expr <- eval(parse(text = paste0("rlang::expr(",code_string,")")))
eval(my_expr)
}
my_string <- "ggplot({dataset}) + geom_{plot_type}(aes(x = {variable}))"
user_inputs <- list(dataset = dat, variable = var, plot_type = "histogram")
bridge(my_string, user_inputs)
bridge <- function(code_string, user_inputs = list()){
sym_inputs <- sub_syms(names(user_inputs))
names(sym_inputs) <- names(user_inputs)
code_string <- glue_data(sym_inputs, my_string)
my_expr <- eval(parse(text = paste0("rlang::expr(",code_string,")")))
eval(my_expr)
}
my_string <- "ggplot({dataset}) + {plot_type}(aes(x = {variable}))"
type <- "histogram"
user_inputs <- list(dataset = dat, variable = var, plot_type = paste0("geom_", type))
bridge(my_string, user_inputs)
type <- "bar"
user_inputs <- list(dataset = dat, variable = var, plot_type = paste0("geom_", type))
bridge(my_string, user_inputs)
type <- "box"
user_inputs <- list(dataset = dat, variable = var, plot_type = paste0("geom_", type))
sym_inputs <- sub_syms(names(user_inputs))
names(sym_inputs) <- names(user_inputs)
code_string <- "ggplot({dataset}) + {plot_type}(aes(x = {variable}))"
code_string <- glue_data(sym_inputs, my_string)
code_string
my_expr <- eval(parse(text = paste0("rlang::expr(",code_string,")")))
my_expr
eval(my_expr)
bridge <- function(code_string, user_inputs = list()){
sym_inputs <- sub_syms(names(user_inputs))
names(sym_inputs) <- names(user_inputs)
code_string <- glue_data(sym_inputs, my_string)
my_expr <- eval(parse(text = paste0("rlang::expr(",code_string,")")))
eval(my_expr)
}
code_string <- "ggplot({dataset}) + {plot_type}(aes(x = {variable}))"
type <- "box"
user_inputs <- list(dataset = dat, variable = var, plot_type = paste0("geom_", type))
bridge(code_string, user_inputs)
bridge <- function(code_string, user_inputs = list()){
sym_inputs <- sub_syms(names(user_inputs))
names(sym_inputs) <- names(user_inputs)
code_string <- glue_data(sym_inputs, my_string)
my_expr <- eval(parse(text = paste0("rlang::expr(",code_string,")")))
eval(my_expr)
}
code_string <- "ggplot({dataset}) + {plot_type}(aes(x = {variable}))"
type <- "boxplot"
user_inputs <- list(dataset = dat, variable = var, plot_type = paste0("geom_", type))
bridge(code_string, user_inputs)
?subset
