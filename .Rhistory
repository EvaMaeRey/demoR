bob <- hlt_red("bob")
knit_print(bob)
knit_print.demo_code = function(x) {
asis_output(attr(x, "print_string"))
}
# register the method
registerS3method("knit_print", "demo_code", knit_print.demo_code)
bob <- demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
}) %>%
hlt_args()
bob
s3_dispatch(knit_print(bob))
asis_output(attr(bob, "print_string"))
bob <- demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
}) %>%
hlt_args()
bob
eval(bob)
plot(bob)
demo_code <- function(.expr) {
print_string <- enexpr(.expr) %>%
deparse() %>%
str_c(collapse = "") %>%
str_replace_all("(^\\{\\s*)|(\\}$)", "")
attr(.expr, "class") <- "demo_code"
attr(.expr, "print_string") <- print_string
return(enexpr(.expr))
}
## an object of type demo_code is a language object that has a print_string attribute
demo_code <- function(.expr) {
print_string <- enexpr(.expr) %>%
deparse() %>%
str_c(collapse = "") %>%
str_replace_all("(^\\{\\s*)|(\\}$)", "")
attr(.expr, "class") <- "demo_code"
attr(.expr, "print_string") <- print_string
return(enexpr(.expr))
}
#demo_code({ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()})
## demo function prints the string and runs the code
demo <- function(my_demo_code) {
return(my_demo_code)
}
bob = expr(mean(1:10))
bob
eval(bob)
bob <- demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
}) %>%
hlt_args()
bob
library(tidyverse)
#library(demoR)
library(knitr)
source("../R/txt_style.R")
source("../R/highlight.R")
source("../R/demo.R")
source("../R/utils-wrap.R")
# define a method for objects of the class data.frame
knit_print.demo_code = function(x, ...) {
asis_output(attr(x, "print_string"))
}
# register the method
registerS3method("knit_print", "demo_code", knit_print.demo_code)
#registerS3method("hlt_regexp", "demo_code", hlt_regexp.demo_code)
bob <- demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
}) %>%
hlt_args() %>%
demo()
bob <- demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
})
bob
demo_code <- function(.code) {
code_expr <- enexpr(.code)
print_string <- code_expr %>%
deparse() %>%
str_c(collapse = "") %>%
str_replace_all("(^\\{\\s*)|(\\}$)", "")
attr(code_expr, "class") <- "demo_code"
attr(code_expr, "print_string") <- print_string
return(code_expr)
}
bob <- demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
})
bob
bob <- demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
}) %>%
hlt_args()
bob
bob <- demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
}) %>%
hlt_args() %>%
demo()
bob
eval(bob)
## an object of type demo_code is a language object that has a print_string attribute
demo_code <- function(.code) {
code_expr <- enexpr(.code)
print_string <- code_expr %>%
deparse() %>%
str_c(collapse = "") %>%
str_replace_all("(^\\{\\s*)|(\\}$)", "")
attr(code_expr, "class") <- "demo_code"
attr(code_expr, "print_string") <- print_string
return(code_expr)
}
#demo_code({ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()})
## demo function prints the string and runs the code
demo <- function(my_demo_code) {
my_demo_code <- enexpr(my_demo_code)
eval(my_demo_code)
return(my_demo_code)
}
bob
expr(bob)
enexpr(bob)
eval(bob)
eval(enexpr(bob))
joe <- expr(mean(1:10))
eval(joe)
demo <- function(my_demo_code) {
my_demo_code <- enexpr(my_demo_code)
eval(my_demo_code)
return(my_demo_code)
}
bob
demo(bob)
demo <- function(my_demo_code) {
eval(my_demo_code)
return(my_demo_code)
}
demo(bob)
eval(bob)
demo <- function(my_demo_code) {
eval_bare(my_demo_code)
return(my_demo_code)
}
demo(bob)
plot(1:10)
demo(bob)
demo <- function(my_demo_code) {
eval_tidy(enquo(my_demo_code))
return(my_demo_code)
}
demo(bob)
class(bob)
?knit_print
vignette('knit_print', package = 'knitr')
unclass(bob)
class(unclass(bob))
class(bob)
attr(bob, "class") <- NULL
bob
class(bob)
attr(bob, "class") <- "language"
bob
eval(bob)
class(bob)
?knit
?knit_print
vignette('knit_print', package = 'knitr')
demo <- function(my_demo_code) {
!!my_demo_code
return(enexpr(my_demo_code))
}
demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
}) %>%
hlt_args() %>%
demo()
## an object of type demo_code is a language object that has a print_string attribute
demo_code <- function(.code) {
code_expr <- enexpr(.code)
print_string <- code_expr %>%
deparse() %>%
str_c(collapse = "") %>%
str_replace_all("(^\\{\\s*)|(\\}$)", "")
attr(code_expr, "class") <- "demo_code"
attr(code_expr, "print_string") <- print_string
return(code_expr)
}
#demo_code({ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()})
## demo function prints the string and runs the code
demo <- function(my_demo_code) {
!!enexpr(my_demo_code)
return(enexpr(my_demo_code))
}
demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
}) %>%
hlt_args() %>%
demo()
!!expr(mean(1:10))
bob <- expr(mean(1:10))
bob
!!bob
eval(bob)
!!quote(bob)
quote(bob)
class(ggplot(iris))
demo_code <- function(.code) {
code_expr <- enexpr(.code)
print_string <- code_expr %>%
deparse() %>%
str_c(collapse = "") %>%
str_replace_all("(^\\{\\s*)|(\\}$)", "")
attr(.code, "class") <- "demo_code"
attr(.code, "print_string") <- print_string
return(.code)
}
demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
})
demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
}) %>%
hlt_args()
joe <- expr(mean(1:10))
unquo(joe)
?unquo
?quo
parse(joe)
eval(joe)
## an object of type demo_code is a language object that has a print_string attribute
demo_code <- function(.code) {
code_expr <- enexpr(.code)
print_string <- code_expr %>%
deparse() %>%
str_c(collapse = "") %>%
str_replace_all("(^\\{\\s*)|(\\}$)", "")
attr(code_expr, "class") <- "demo_code"
attr(code_expr, "print_string") <- print_string
return(code_expr)
}
#demo_code({ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()})
## demo function prints the string and runs the code
demo <- function(my_demo_code) {
eval(my_demo_code)
return(my_demo_code)
}
demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
}) %>%
hlt_args()
demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
}) %>%
hlt_args() %>%
eval()
demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
}) %>%
hlt_args() %>%
demo()
## an object of type demo_code is a language object that has a print_string attribute
demo_code <- function(.code) {
code_expr <- enexpr(.code)
print_string <- code_expr %>%
deparse() %>%
str_c(collapse = "") %>%
str_replace_all("(^\\{\\s*)|(\\}$)", "")
attr(code_expr, "class") <- "demo_code"
attr(code_expr, "print_string") <- print_string
return(code_expr)
}
#demo_code({ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()})
## demo function prints the string and runs the code
demo <- function(my_demo_code) {
eval(enexpr(my_demo_code))
return(my_demo_code)
}
demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
}) %>%
hlt_args() %>%
demo()
library(tidyverse)
#library(demoR)
library(knitr)
library(highr)
source("../R/txt_style.R")
source("../R/highlight.R")
source("../R/demo.R")
source("../R/utils-wrap.R")
# # define a method for objects of the class demo_code
knit_print.demo_code <- function(x, ...) {
if (length(x) > 1) {
asis_output(paste(attr(x, "print_string"), knitr:::wrap(x[[2]], ...)))
} else {
asis_output(attr(x, "print_string"))
}
}
print.demo_code <- function(x, ...) {
eval(x)
}
#
# bob <- expr(mean(1:10))
#
# ugh <- function(x){
#
#   toString(ensym(x))
#
# }
#
# ugh(bob)
# hilight.demo_code <- function(x) {
#
#   attr(x, "print_string")
#
# }
#
#
# # register the method
registerS3method("knit_print", "demo_code", knit_print.demo_code)
registerS3method("print", "demo_code", print.demo_code)
#registerS3method("hlt_regexp", "demo_code", hlt_regexp.demo_code)
#registerS3method("hilight", "demo_code", hilight.demo_code)
demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) +
geom_point()
}) %>%
hlt_args(color = "green") %>%
hlt_funs(color = "blue") %>%
hlt_input_vals(color = "red") %>%
hlt_regexp("Sepal.Length")
demo_code(foo <- mean(1:10)) %>% hlt_input_vals()
foo + 5
library(tidyverse)
#library(demoR)
library(knitr)
library(highr)
source("../R/txt_style.R")
source("../R/highlight.R")
source("../R/demo.R")
source("../R/utils-wrap.R")
# # define a method for objects of the class demo_code
knit_print.demo_code <- function(x, ...) {
if (length(x) > 1) {
asis_output(paste(attr(x, "print_string"), knitr:::wrap(x[[2]], ...)))
} else {
asis_output(attr(x, "print_string"))
}
}
print.demo_code <- function(x, ...) {
evaluate(x)[[2]]
}
#
# bob <- expr(mean(1:10))
#
# ugh <- function(x){
#
#   toString(ensym(x))
#
# }
#
# ugh(bob)
# hilight.demo_code <- function(x) {
#
#   attr(x, "print_string")
#
# }
#
#
# # register the method
registerS3method("knit_print", "demo_code", knit_print.demo_code)
registerS3method("print", "demo_code", print.demo_code)
#registerS3method("hlt_regexp", "demo_code", hlt_regexp.demo_code)
#registerS3method("hilight", "demo_code", hilight.demo_code)
demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) +
geom_point()
}) %>%
hlt_args(color = "green") %>%
hlt_funs(color = "blue") %>%
hlt_input_vals(color = "red") %>%
hlt_regexp("Sepal.Length")
print.demo_code <- function(x, ...) {
evaluate::evaluate(x)[[2]]
}
registerS3method("print", "demo_code", print.demo_code)
demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) +
geom_point()
}) %>%
hlt_args(color = "green") %>%
hlt_funs(color = "blue") %>%
hlt_input_vals(color = "red") %>%
hlt_regexp("Sepal.Length")
demo_code(foo <- mean(1:10)) %>% hlt_input_vals()
foo + 5
print.demo_code <- function(x, ...) {
return(evaluate::evaluate(x)[[2]])
}
#
# bob <- expr(mean(1:10))
#
# ugh <- function(x){
#
#   toString(ensym(x))
#
# }
#
# ugh(bob)
# hilight.demo_code <- function(x) {
#
#   attr(x, "print_string")
#
# }
#
#
# # register the method
registerS3method("knit_print", "demo_code", knit_print.demo_code)
registerS3method("print", "demo_code", print.demo_code)
#registerS3method("hlt_regexp", "demo_code", hlt_regexp.demo_code)
#registerS3method("hilight", "demo_code", hilight.demo_code)
demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) +
geom_point()
}) %>%
hlt_args(color = "green") %>%
hlt_funs(color = "blue") %>%
hlt_input_vals(color = "red") %>%
hlt_regexp("Sepal.Length")
demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) +
geom_point()
}) %>%
hlt_args(color = "green") %>%
hlt_funs(color = "blue") %>%
hlt_input_vals(color = "red") %>%
hlt_regexp("Sepal.Length")
demo_code(foo <- mean(1:10)) %>% hlt_input_vals()
foo + 5
demo_code(mean(1:10)) %>% hlt_input_vals()
foo + 5
??diffChr
install.packages("diffobj")
?rdiff
?Rdiff
Rdiff("hi", "hello")
library(tools)
Rdiff("hi", "hello")
bob <- NULL
list(bob, 1,2,3)
start_sym <- "\\>"
end_sym <- "//<"
ignore_these <- NULL
ignore_these <- c(start_sym, end_sym, ignore_these)
ignore_these
innards <- purrr::map(ignore_these, ~paste0("(", .x, ")") %>% str_c(collapse = "|")
)
innards <- purrr::map(ignore_these, ~paste0("(", .x, ")")) %>% str_c(collapse = "|")
innards
ignore_these <- "(?=\\-\\>)"
ignore_these <- c(start_sym, end_sym, ignore_these)
innards <- purrr::map(ignore_these, ~paste0("(", .x, ")")) %>% str_c(collapse = "|")
innards
split_sandwiches <- function(.string, start_sym, end_sym, ignore_these = NULL, split_blanks = FALSE) {
ignore_these <- c(start_sym, end_sym, ignore_these)
innards <- purrr::map(ignore_these, ~paste0("(", .x, ")")) %>% str_c(collapse = "|")
# require at least one character between delimiters?
if (split_blanks) {
inner_regex <- glue::glue("{start_sym}[^{innards}]*{end_sym}")
outer_regex <- glue::glue("{end_sym}[^{innards}]*{start_sym}")
} else {
inner_regex <- glue::glue("{start_sym}[^{innards}]*{end_sym}")
outer_regex <- glue::glue("{end_sym}[^{innards}]*{start_sym}")
}
full_regex = glue::glue("({inner_regex})|({outer_regex})")
return(.string %>% str_extract_all(full_regex))
}
testthat::test_that("split_sandwiches")
usethis::use_test("split_blanks")
usethis::use_test("split_sandwich")
demo_code(foo <- mean(1:10)) %>% hlt_input_vals()
attr(thing, "print_string")
thing <- demo_code(foo <- mean(1:10)) %>% hlt_input_vals()
attr(thing, "print_string")
usethis::use_test("split_sandwiches")
test_that("split_sandwich pulls html apart", {
highlighted_code <- "<pre class='r'><code>foo <- mean(<span style='background-color:#ffff7f'>1:10</span>)</code></pre>"
start_sym <- "//<"
end_sym <- "//>"
ignore_these <- c("(?<=(\\-|\\>))\\>", "\\<(?=(\\-|\\<))")
expected_results_1 <- list(
"<pre class='r'><code>",
"foo <- mean(",
"<span style='background-color:#ffff7f'>",
"1:10",
"</span>",
")",
"</code></pre>")
expected_results_2 <- list(
"<pre class='r'>",
"<code>",
"foo <- mean(",
"<span style='background-color:#ffff7f'>",
"1:10",
"</span>",
")",
"</code>",
"</pre>")
expect_equal(expected_results_1, split_sandwiches(highlighted_code, start_sym, end_sym, ignore_these))
expect_equal(expected_results_2, split_sandwiches(highlighted_code, start_sym, end_sym, ignore_these, split_blanks = TRUE))
})
