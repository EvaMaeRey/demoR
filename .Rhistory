install.packages("usethis")
library(usethis)
usethis::use_r("hlt_funs")
code_string <- "ggplot({dataset}) + {plot_type}(aes(x = {variable}))"
strsplit(code_string)
strsplit(code_string, split = "\\(")
strsplit(code_string, split = "\\(")[[1]]
funs <- strsplit(strpieces[1:(length(strpieces)-1)], split = " ")[[1]]
strpieces <- strsplit(code_string, split = "\\(")[[1]]
funs <- strsplit(strpieces[1:(length(strpieces)-1)], split = " ")[[1]]
strpieces
fun
funs
strsplit(strpieces[1:(length(strpieces)-1)], split = " ")
strpieces <- strsplit(code_string, split = "\\(")[[1]]
funs <- lapply(strsplit(strpieces[1:(length(strpieces)-1)], split = " "), function(x) x[length(x)])
strpieces
funs
hlt_pieces <- sapply(funs, function(x) paste0("<font color='", colory, "'>", x, "</font>"))
colory <- "red"
hlt_pieces <- sapply(funs, function(x) paste0("<font color='", colory, "'>", x, "</font>"))
strpieces
funs
hlt_pieces
?sub
library(tidyverse)
strpieces
funs
print_string <- map2(funs, hlt_pieces, sub, x = code_string)
code_string <- "ggplot(df) + geom_histogram(aes(x = var1))"
strpieces <- strsplit(code_string, split = "\\(")[[1]]
funs <- lapply(strsplit(strpieces[1:(length(strpieces)-1)], split = " "), function(x) x[length(x)])
hlt_pieces <- sapply(funs, function(x) paste0("<font color='", colory, "'>", x, "</font>"))
print_string <- map2(funs, hlt_pieces, sub, x = code_string)
strpieces
funs
funs <- sapply(strsplit(strpieces[1:(length(strpieces)-1)], split = " "), function(x) x[length(x)])
funs
hlt_pieces <- sapply(funs, function(x) paste0("<font color='", colory, "'>", x, "</font>"))
print_string <- map2(funs, hlt_pieces, sub, x = code_string)
strpieces
funs
hlt_pieces
print_string
?reduce
?Reduce
str_sub()
?str_sub
?str_replace
print_string <- reduce2(funs, hlt_pieces, str_replace, string = code_string)
strpieces <- strsplit(code_string, split = "\\(")[[1]]
funs <- sapply(strsplit(strpieces[1:(length(strpieces)-1)], split = " "), function(x) x[length(x)])
hlt_pieces <- sapply(funs, function(x) paste0("<font color='", colory, "'>", x, "</font>"))
# blue_inputs <- sapply(old_input, function(x) paste0("<font color='blue'>", x, "</font>"))
print_string <- reduce2(funs, hlt_pieces, str_replace, string = code_string)
funs
hlt_pieces
letters[1:4] %>% reduce2(c("-", ".", "-"), paste2)
paste2 <- function(x, y, sep = ".") paste(x, y, sep = sep)
letters[1:4] %>% reduce2(c("-", ".", "-"), paste2)
l1 <- list(c(funs[1], hlt_pieces[1]), c(funs[2], hlt_pieces[2]), c(funs[3], hlt_pieces[3]))
l1
print_string <- reduce(c(code_string, l1), str_sub)
print_string
c(code_string, l1)
str_sub(code_string, l1[[2]])
str_sub(code_string, "ggplot", hlt_pieces[1])
hlt_pieces <- lapply(funs, function(x) paste0("<font color='", colory, "'>", x, "</font>"))
hlt_pieces
?sapply
hlt_pieces <- sapply(funs, function(x) paste0("<font color='", colory, "'>", x, "</font>"), USE.NAMES = FALSE)
hlt_pieces
l1 <- list(c(funs[1], hlt_pieces[1]), c(funs[2], hlt_pieces[2]), c(funs[3], hlt_pieces[3]))
print_string <- reduce(c(code_string, l1), str_sub)
print_string
str_sub(code_string, "ggplot", hlt_pieces[1])
grepl("ggplot", code_string)
str_sub(code_string, "ggplot", "wow")
code_string
print_string <- reduce(c(code_string, l1), str_replace)
print_string <- reduce2(c(code_string, funs), hlt_pieces, str_replace)
print_string
usethis::use_r("hlt_vars")
strpieces <- strsplit(code_string, split = "\\(")[[1]]
funs <- sapply(strsplit(strpieces[1:(length(strpieces)-1)], split = " "), function(x) x[length(x)])
hlt_pieces <- sapply(funs, function(x) paste0("<font color='", hltcolor, "'>", x, "</font>"), USE.NAMES = FALSE)
print_string <- reduce2(c(code_string, funs), hlt_pieces, str_replace)
paste("<pre class='r'><code>", print_string, "</code></pre>")
hltcolor = "red"
strpieces <- strsplit(code_string, split = "\\(")[[1]]
funs <- sapply(strsplit(strpieces[1:(length(strpieces)-1)], split = " "), function(x) x[length(x)])
hlt_pieces <- sapply(funs, function(x) paste0("<font color='", hltcolor, "'>", x, "</font>"), USE.NAMES = FALSE)
print_string <- reduce2(c(code_string, funs), hlt_pieces, str_replace)
paste("<pre class='r'><code>", print_string, "</code></pre>")
code_string
code_string <- "ggplot(data = df) + geom_histogram(aes(x = var1))"
strpieces <- strsplit(code_string, split = "\\(")[[1]]
funs <- sapply(strsplit(strpieces[1:(length(strpieces)-1)], split = " "), function(x) x[length(x)])
hlt_pieces <- sapply(funs, function(x) paste0("<font color='", hltcolor, "'>", x, "</font>"), USE.NAMES = FALSE)
print_string <- reduce2(c(code_string, funs), hlt_pieces, str_replace)
paste("<pre class='r'><code>", print_string, "</code></pre>")
code_string
strpieces <- strsplit(code_string, split = "=")[[1]]
strpieces
code_string <- "ggplot(data = df) + geom_histogram(aes(x = var1, y = var2))"
code_string
strpieces <- strsplit(code_string, split = "=")[[1]]
strpieces
strsplit(strpieces[1:(length(strpieces)-1)], split = "\\)|,")
strsplit(strpieces[1:(length(strpieces)-1)], split = "\\)|, ")
strsplit(strpieces[1:length(strpieces)], split = "\\)|, ")
flatten(strsplit(strpieces[1:length(strpieces)], split = "\\)|, "))
unlist(strsplit(strpieces[1:length(strpieces)], split = "\\)|, "))
?str_extract
code_string <- "ggplot(data = df) + geom_histogram(aes(x = var1, y = var2))"
strpieces <- strsplit(code_string, split = "=")[[1]]
funs <- unlist(strsplit(strpieces[1:length(strpieces)], split = "\\)|, "))
funs <- funs[grepl("^ ", funs)]
strpieces
code_string
strpieces
funs
code_string
strpieces
funs <- unlist(strsplit(strpieces[1:length(strpieces)], split = "\\)|, "))
funs
funs <- funs[grepl("(^ )[^\s]$", funs)]
funs <- funs[grepl("(^ )[^\\s]$", funs)]
funs
funs <- unlist(strsplit(strpieces[1:length(strpieces)], split = "\\)|, "))
funs
funs <- funs[grepl("(^ ).+[^\\s]$", funs)]
funs
funs <- unlist(strsplit(strpieces[1:length(strpieces)], split = "\\)|, "))
funs <- funs[grepl("(^ ).+^\\S$", funs)]
funs
funs <- unlist(strsplit(strpieces[1:length(strpieces)], split = "\\)|, "))
funs
funs <- funs[grepl("(^ ).+(a-Z0-9)$", funs)]
funs
funs <- unlist(strsplit(strpieces[1:length(strpieces)], split = "\\)|, "))
funs <- funs[grepl("(^ ).+(A-Za-z0-9)$", funs)]
funs
?regex
funs <- unlist(strsplit(strpieces[1:length(strpieces)], split = "\\)|, "))
funs
funs <- funs[grepl("[:punct:]{0}", funs)]
funs
funs <- unlist(strsplit(strpieces[1:length(strpieces)], split = "\\)|, "))
funs
funs <- funs[grepl("[^[:punct:]]", funs)]
funs
funs <- funs[grepl("^[:punct:]", funs)]
funs
funs <- unlist(strsplit(strpieces[1:length(strpieces)], split = "\\)|, "))
funs <- funs[grepl(" ^", funs)]
funs <- unlist(strsplit(strpieces[1:length(strpieces)], split = "\\)|, "))
funs <- funs[grepl(" ^", funs)]
funs <- unlist(strsplit(strpieces[1:length(strpieces)], split = "\\)|, "))
funs
funs <- funs[grepl("^ ", funs)]
funs
funs <- unlist(strsplit(strpieces[1:length(strpieces)], split = "\\)|, "))
funs <- funs[grepl("(^ )&([^ $])", funs)]
funs <- unlist(strsplit(strpieces[1:length(strpieces)], split = "\\)|, "))
funs <- funs[grepl("(^ )&([^( $)])", funs)]
funs <- unlist(strsplit(strpieces[1:length(strpieces)], split = "\\)|, "))
funs <- funs[grepl("^ ", funs)]
funs <- grepl("[^[:punct:]]", funs)
funs <- unlist(strsplit(strpieces[1:length(strpieces)], split = "\\)|, "))
funs
funs <- funs[grepl("^ ", funs)]
funs
funs <- funs[grepl("[^[:punct:]]", funs)]
funs
funs <- unlist(strsplit(strpieces[1:length(strpieces)], split = "\\)|, "))
funs
funs <- funs[grepl("^ ", funs)]
funs
funs <- funs[!grepl("[[:punct:]]", funs)]
funs
funs <- unlist(strsplit(strpieces[1:length(strpieces)], split = "\\)|, "))
funs
funs <- funs[grepl("^ ", funs)]
funs
funs <- trimws(funs[!grepl("[[:punct:]]", funs)])
funs
strpieces <- strsplit(code_string, split = "=")[[1]]
funs <- unlist(strsplit(strpieces[1:length(strpieces)], split = "\\)|, "))
funs <- funs[grepl("^ ", funs)]
funs <- trimws(funs[!grepl("[[:punct:]]", funs)])
## variable names should always immediately preceed a closed parentheses or comma,
## and immediately follow a space
hlt_pieces <- sapply(funs, function(x) paste0("<font color='", hltcolor, "'>", x, "</font>"), USE.NAMES = FALSE)
print_string <- reduce2(c(code_string, funs), hlt_pieces, str_replace)
paste("<pre class='r'><code>", print_string, "</code></pre>")
hltcolor <- "red"
strpieces <- strsplit(code_string, split = "=")[[1]]
funs <- unlist(strsplit(strpieces[1:length(strpieces)], split = "\\)|, "))
funs <- funs[grepl("^ ", funs)]
funs <- trimws(funs[!grepl("[[:punct:]]", funs)])
## variable names should always immediately preceed a closed parentheses or comma,
## and immediately follow a space
hlt_pieces <- sapply(funs, function(x) paste0("<font color='", hltcolor, "'>", x, "</font>"), USE.NAMES = FALSE)
print_string <- reduce2(c(code_string, funs), hlt_pieces, str_replace)
paste("<pre class='r'><code>", print_string, "</code></pre>")
usethis::use_r("hlt_args")
hltcolor <- "red"
code_string <- "ggplot(data = df) + geom_histogram(aes(x = var1, y = var2))"
strpieces <- strsplit(code_string, split = "=")[[1]]
strpieces
funs <- unlist(strsplit(strpieces[1:length(strpieces)], split = "\\(|, "))
funs
funs <- funs[grepl(" $", funs)]
funs
strpieces <- strsplit(code_string, split = "=")[[1]]
funs <- unlist(strsplit(strpieces[1:length(strpieces)], split = "\\(|, "))
funs <- trimws(funs[grepl(" $", funs)])
## argument names should always immediately follow an open parentheses or comma space,
## and immediately preceed a space equals
hlt_pieces <- sapply(funs, function(x) paste0("<font color='", hltcolor, "'>", x, "</font>"), USE.NAMES = FALSE)
print_string <- reduce2(c(code_string, funs), hlt_pieces, str_replace)
paste("<pre class='r'><code>", print_string, "</code></pre>")
usethis::use_r("hlt_specific")
code_string
specs = c("data", "var1")
hlt_pieces <- sapply(specs, function(x) paste0("<font color='", hltcolor, "'>", x, "</font>"), USE.NAMES = FALSE)
print_string <- reduce2(c(code_string, specs), hlt_pieces, str_replace)
paste("<pre class='r'><code>", print_string, "</code></pre>")
