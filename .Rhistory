# return(.expr)
}
demo_code(mean(1:10))
demo_code <- function(.expr) {
# attr(.expr, "class") <- "demo_code"
# attr(.expr, "print_string") <-
as_label(enquo(.expr))
# return(.expr)
}
demo_code(mean(1:10))
bob <- demo_code(
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
)
bob
demo_code <- function(.expr) {
# attr(.expr, "class") <- "demo_code"
# attr(.expr, "print_string") <-
deparse(enexpr(.expr))
# return(.expr)
}
demo_code({mean(1:10)})
demo_code({ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()})
demo_code({ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()}) %>% str_c()
demo_code({ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()}) %>% str_c(collapse = "")
demo_code <- function(.expr) {
# attr(.expr, "class") <- "demo_code"
# attr(.expr, "print_string") <-
print_string <- .expr %>%
enexpr() %>%
deparse() %>%
str_c() %>%
str_replace_all("(^{\\s*)|(}$", "")
return(print_string)
}
demo_code({ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()})
demo_code <- function(.expr) {
# attr(.expr, "class") <- "demo_code"
# attr(.expr, "print_string") <-
print_string <- enexpr(.expr) %>%
deparse() %>%
str_c() %>%
str_replace_all("(^{\\s*)|(}$", "")
return(print_string)
}
demo_code({ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()})
demo_code <- function(.expr) {
# attr(.expr, "class") <- "demo_code"
# attr(.expr, "print_string") <-
print_string <- enexpr(.expr) %>%
deparse() %>%
str_c(collapse = "") %>%
str_replace_all("(^{\\s*)|(}$", "")
return(print_string)
}
demo_code({ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()})
demo_code <- function(.expr) {
# attr(.expr, "class") <- "demo_code"
# attr(.expr, "print_string") <-
print_string <- enexpr(.expr) %>%
deparse() %>%
str_c(collapse = "") #%>%
#str_replace_all("(^{\\s*)|(}$", "")
return(print_string)
}
demo_code({ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()})
demo_code <- function(.expr) {
# attr(.expr, "class") <- "demo_code"
# attr(.expr, "print_string") <-
print_string <- enexpr(.expr) %>%
deparse() %>%
str_c(collapse = "") %>%
str_replace_all("(^\\{\\s*)|(\\}$", "")
return(print_string)
}
demo_code({ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()})
demo_code <- function(.expr) {
# attr(.expr, "class") <- "demo_code"
# attr(.expr, "print_string") <-
print_string <- enexpr(.expr) %>%
deparse() %>%
str_c(collapse = "") %>%
str_replace_all("(^\\{\\s*)|(\\}$)", "")
return(print_string)
}
demo_code({ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()})
demo_code <- function(.expr) {
print_string <- enexpr(.expr) %>%
deparse() %>%
str_c(collapse = "") %>%
str_replace_all("(^\\{\\s*)|(\\}$)", "")
attr(.expr, "class") <- "demo_code"
attr(.expr, "print_string") <- print_string
return(.expr)
}
bob <- demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
})
bob
## an object of type demo_code is a language object that has a print_string attribute
demo_code <- function(.expr) {
print_string <- enexpr(.expr) %>%
deparse() %>%
str_c(collapse = "") %>%
str_replace_all("(^\\{\\s*)|(\\}$)", "")
attr(.expr, "class") <- "demo_code"
attr(.expr, "print_string") <- print_string
return(.expr)
}
#demo_code({ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()})
## demo function prints the string and runs the code
demo <- function(my_demo_code) {
print_string <- attr(my_demo_code, "print_string")
print(print_string)
return(my_demo_code)
}
bob <- demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
})
bob
bob <- demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
}) %>%
hlt_args()
bob
attr(bob, "print_string")
bob <- demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
})
attr(bob, "print_string")
hlt_regexp(attr(bob, "print_string"))
hlt_regexp.demo_code = function(x, ...) {
print_string <- attr(x, "print_string")
attr(x, "print_string") <- hlt_regexp(print_string, ...)
return(x)
}
registerS3method("hlt_regexp", "demo_code", hlt_regexp.demo_code)
bob <- demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
}) %>%
hlt_args()
bob <- demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
})
hlt_args(attr(bob, "print_string"))
bib
bob
hlt_args(bob)
class(bob)
library(sloop)
install.packages("sloop")
library(sloop)
s3_dispatch(hlt_args(bob))
bob
s3_dispatch(hlt_args(bob))
s3_dispatch(hlt_args("hi"))
s3_methods_class(hlt_args())
s3_methods_class(hlt_regexp)
s3_methods_class(hlt_regexp())
s3_methods_class("hlt_regexp")
source("../R/highlight.R")
s3_methods_class("hlt_regexp")
s3_methods_generic("hlt_regexp")
s3_dispatch(hlt_args("hi"))
s3_dispatch(hlt_args(bob))
?s3_dispatch
s3_dispatch(hlt_regexp(bob))
bob <- demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
}) %>%
hlt_args()
bob
class(bob)
## an object of type demo_code is a language object that has a print_string attribute
demo_code <- function(.expr) {
print_string <- enexpr(.expr) %>%
deparse() %>%
str_c(collapse = "") %>%
str_replace_all("(^\\{\\s*)|(\\}$)", "")
attr(.expr, "class") <- "demo_code"
attr(.expr, "print_string") <- print_string
return(.expr)
}
#demo_code({ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()})
## demo function prints the string and runs the code
demo <- function(my_demo_code) {
print_string <- attr(my_demo_code, "print_string")
print(print_string)
return(my_demo_code)
}
bob <- demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
}) %>%
hlt_args() %>%
demo()
library(tidyverse)
#library(demoR)
library(knitr)
source("../R/txt_style.R")
source("../R/highlight.R")
source("../R/demo.R")
source("../R/utils-wrap.R")
# define a method for objects of the class data.frame
knit_print.demo_code = function(x, ...) {
asis_output(x)
}
hlt_regexp.demo_code = function(x, ...) {
print_string <- attr(x, "print_string")
attr(x, "print_string") <- hlt_regexp(print_string, ...)
return(x)
}
# register the method
registerS3method("knit_print", "demo_code", knit_print.demo_code)
#registerS3method("hlt_regexp", "demo_code", hlt_regexp.demo_code)
bob <- demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
}) %>%
hlt_args() %>%
demo()
hlt_red <- function(string){
str <- paste0("<font color = 'red'>", string, "</font>")
return(structure(str, class = "hlt_str"))
}
library(knitr)
# define a method for objects of the class data.frame
knit_print.hlt_str = function(x, ...) {
asis_output(x)
}
# register the method
registerS3method("knit_print", "hlt_str", knit_print.hlt_str)
bob <- hlt_red("bob")
knit_print(bob)
knit_print.demo_code = function(x) {
asis_output(attr(x, "print_string"))
}
# register the method
registerS3method("knit_print", "demo_code", knit_print.demo_code)
bob <- demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
}) %>%
hlt_args()
bob
s3_dispatch(knit_print(bob))
asis_output(attr(bob, "print_string"))
bob <- demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
}) %>%
hlt_args()
bob
eval(bob)
plot(bob)
demo_code <- function(.expr) {
print_string <- enexpr(.expr) %>%
deparse() %>%
str_c(collapse = "") %>%
str_replace_all("(^\\{\\s*)|(\\}$)", "")
attr(.expr, "class") <- "demo_code"
attr(.expr, "print_string") <- print_string
return(enexpr(.expr))
}
## an object of type demo_code is a language object that has a print_string attribute
demo_code <- function(.expr) {
print_string <- enexpr(.expr) %>%
deparse() %>%
str_c(collapse = "") %>%
str_replace_all("(^\\{\\s*)|(\\}$)", "")
attr(.expr, "class") <- "demo_code"
attr(.expr, "print_string") <- print_string
return(enexpr(.expr))
}
#demo_code({ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()})
## demo function prints the string and runs the code
demo <- function(my_demo_code) {
return(my_demo_code)
}
bob = expr(mean(1:10))
bob
eval(bob)
bob <- demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
}) %>%
hlt_args()
bob
library(tidyverse)
#library(demoR)
library(knitr)
source("../R/txt_style.R")
source("../R/highlight.R")
source("../R/demo.R")
source("../R/utils-wrap.R")
# define a method for objects of the class data.frame
knit_print.demo_code = function(x, ...) {
asis_output(attr(x, "print_string"))
}
# register the method
registerS3method("knit_print", "demo_code", knit_print.demo_code)
#registerS3method("hlt_regexp", "demo_code", hlt_regexp.demo_code)
bob <- demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
}) %>%
hlt_args() %>%
demo()
bob <- demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
})
bob
demo_code <- function(.code) {
code_expr <- enexpr(.code)
print_string <- code_expr %>%
deparse() %>%
str_c(collapse = "") %>%
str_replace_all("(^\\{\\s*)|(\\}$)", "")
attr(code_expr, "class") <- "demo_code"
attr(code_expr, "print_string") <- print_string
return(code_expr)
}
bob <- demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
})
bob
bob <- demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
}) %>%
hlt_args()
bob
bob <- demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
}) %>%
hlt_args() %>%
demo()
bob
eval(bob)
## an object of type demo_code is a language object that has a print_string attribute
demo_code <- function(.code) {
code_expr <- enexpr(.code)
print_string <- code_expr %>%
deparse() %>%
str_c(collapse = "") %>%
str_replace_all("(^\\{\\s*)|(\\}$)", "")
attr(code_expr, "class") <- "demo_code"
attr(code_expr, "print_string") <- print_string
return(code_expr)
}
#demo_code({ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()})
## demo function prints the string and runs the code
demo <- function(my_demo_code) {
my_demo_code <- enexpr(my_demo_code)
eval(my_demo_code)
return(my_demo_code)
}
bob
expr(bob)
enexpr(bob)
eval(bob)
eval(enexpr(bob))
joe <- expr(mean(1:10))
eval(joe)
demo <- function(my_demo_code) {
my_demo_code <- enexpr(my_demo_code)
eval(my_demo_code)
return(my_demo_code)
}
bob
demo(bob)
demo <- function(my_demo_code) {
eval(my_demo_code)
return(my_demo_code)
}
demo(bob)
eval(bob)
demo <- function(my_demo_code) {
eval_bare(my_demo_code)
return(my_demo_code)
}
demo(bob)
plot(1:10)
demo(bob)
demo <- function(my_demo_code) {
eval_tidy(enquo(my_demo_code))
return(my_demo_code)
}
demo(bob)
class(bob)
?knit_print
vignette('knit_print', package = 'knitr')
unclass(bob)
class(unclass(bob))
class(bob)
attr(bob, "class") <- NULL
bob
class(bob)
attr(bob, "class") <- "language"
bob
eval(bob)
class(bob)
?knit
?knit_print
vignette('knit_print', package = 'knitr')
demo <- function(my_demo_code) {
!!my_demo_code
return(enexpr(my_demo_code))
}
demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
}) %>%
hlt_args() %>%
demo()
## an object of type demo_code is a language object that has a print_string attribute
demo_code <- function(.code) {
code_expr <- enexpr(.code)
print_string <- code_expr %>%
deparse() %>%
str_c(collapse = "") %>%
str_replace_all("(^\\{\\s*)|(\\}$)", "")
attr(code_expr, "class") <- "demo_code"
attr(code_expr, "print_string") <- print_string
return(code_expr)
}
#demo_code({ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()})
## demo function prints the string and runs the code
demo <- function(my_demo_code) {
!!enexpr(my_demo_code)
return(enexpr(my_demo_code))
}
demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
}) %>%
hlt_args() %>%
demo()
!!expr(mean(1:10))
bob <- expr(mean(1:10))
bob
!!bob
eval(bob)
!!quote(bob)
quote(bob)
class(ggplot(iris))
demo_code <- function(.code) {
code_expr <- enexpr(.code)
print_string <- code_expr %>%
deparse() %>%
str_c(collapse = "") %>%
str_replace_all("(^\\{\\s*)|(\\}$)", "")
attr(.code, "class") <- "demo_code"
attr(.code, "print_string") <- print_string
return(.code)
}
demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
})
demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
}) %>%
hlt_args()
joe <- expr(mean(1:10))
unquo(joe)
?unquo
?quo
parse(joe)
eval(joe)
## an object of type demo_code is a language object that has a print_string attribute
demo_code <- function(.code) {
code_expr <- enexpr(.code)
print_string <- code_expr %>%
deparse() %>%
str_c(collapse = "") %>%
str_replace_all("(^\\{\\s*)|(\\}$)", "")
attr(code_expr, "class") <- "demo_code"
attr(code_expr, "print_string") <- print_string
return(code_expr)
}
#demo_code({ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()})
## demo function prints the string and runs the code
demo <- function(my_demo_code) {
eval(my_demo_code)
return(my_demo_code)
}
demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
}) %>%
hlt_args()
demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
}) %>%
hlt_args() %>%
eval()
demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
}) %>%
hlt_args() %>%
demo()
## an object of type demo_code is a language object that has a print_string attribute
demo_code <- function(.code) {
code_expr <- enexpr(.code)
print_string <- code_expr %>%
deparse() %>%
str_c(collapse = "") %>%
str_replace_all("(^\\{\\s*)|(\\}$)", "")
attr(code_expr, "class") <- "demo_code"
attr(code_expr, "print_string") <- print_string
return(code_expr)
}
#demo_code({ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()})
## demo function prints the string and runs the code
demo <- function(my_demo_code) {
eval(enexpr(my_demo_code))
return(my_demo_code)
}
demo_code({
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) + geom_point()
}) %>%
hlt_args() %>%
demo()
